#!/usr/bin/env node
(()=>{"use strict";var e={305:(e,o,n)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.Utils=void 0;const t=n(435),r=n(129).exec;process.env.npm_config_env,o.Utils=class{constructor(){}init(){}listService(){let e=process.env.npm_config_name;return e=e?`hzn exchange service list ${e}`:"hzn exchange service list",this.shell(e)}listPattern(){let e=process.env.npm_config_name;return e=e?`hzn exchange pattern list ${e}`:"hzn exchange pattern list",this.shell(e)}listNode(){let e=process.env.npm_config_name;return e=e?`hzn exchange node list ${e}`:"hzn exchange node list",this.shell(e)}listObject(){let e=process.env.npm_config_name;return e=e?`hzn mms object list ${e}`:"hzn mms object list",this.shell(e)}listDeploymentPolicy(){let e=process.env.npm_config_name;return e=e?`hzn exchange deployment listpolicy ${e}`:"hzn exchange deployment listpolicy",this.shell(e)}createHznKey(){let e=process.env.npm_config_org,o=process.env.npm_config_email;return e&&o?this.shell(`hzn key creat ${e} ${o}`):(console.log("please provide both org and email: --org=<org> --email=<email>."),(0,t.of)())}checkConfigState(){return this.shell("hzn node list | jq .configstate.state")}listNodePattern(){return this.shell("hzn node list | jq .pattern")}getDeviceArch(){return this.shell("hzn architecture")}shell(e){return new t.Observable((o=>{r(e,{maxBuffer:2048e3},((e,n,t)=>{e?(console.log(`shell command failed: ${e}`),o.error(e)):(console.log(n),o.next(n),o.complete())}))}))}}},155:(e,o,n)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.Env=void 0;const t=n(435),r=n(747),s=n(129).exec,l=process.env;o.Env=class{constructor(){this.env=l.npm_config_env||"biz"}init(){return new t.Observable((e=>{this.hznEnv=l.npm_config_hznEnv||"./config/mms/.env-hzn.json",this.hznJson=JSON.parse((0,r.readFileSync)(this.hznEnv).toString()),console.log(process.cwd(),this.env,this.hznJson),this.envVars=this.hznJson[this.env].envVars;for(const[e,o]of Object.entries(this.envVars))l[e]=o.replace(/\r?\n|\r/g,""),console.log(`${e}: ${l[e]}`);this.envVars.ARCH&&void 0!==this.envVars.ARCH?(this.setAdditionalEnv(),console.log(this.envVars.ARCH),e.next(),e.complete()):s("hzn architecture",{maxBuffer:2048e3},((o,n,t)=>{o?(console.log("failed to identify arch",o),e.error(o)):(l.ARCH=this.envVars.ARCH=n.replace(/\r?\n|\r/g,""),this.setAdditionalEnv(),e.next(),e.complete())}))}))}setAdditionalEnv(){l.MMS_PATTERN_NAME=`pattern-${l.MMS_SERVICE_NAME}-${l.ARCH}`,l.MMS_CONTAINER=`${l.YOUR_DOCKERHUB_ID}/${l.MMS_SERVICE_NAME}_${l.ARCH}:${l.MMS_SERVICE_VERSION}`.replace(/\r?\n|\r/g,"")}getEnv(){return this.env}getOrgId(){return console.log(l.HZN_ORG_ID),l.HZN_ORG_ID}getExchangeUserAuth(){return l.HZN_EXCHANGE_USER_AUTH}getExchangeUrl(){return l.HZN_EXCHANGE_URL}getFSSCSSUrl(){return l.HZN_FSS_CSSURL}getMyServiceName(){return l.YOUR_SERVICE_NAME}getMyServiceVersion(){return l.YOUR_SERVICE_VERSION}getMMSSharedVolume(){return l.MMS_SHARED_VOLUME}getMyDockerHubId(){return l.YOUR_DOCKERHUB_ID}getDockerImageBase(){return`${l.YOUR_DOCKERHUB_ID}/${l.MMS_SERVICE_NAME}`}getMMSContainerCreds(){return l.MMS_CONTAINER_CREDS}getMMSPatterName(){return l.MMS_PATTERN_NAME}getMMSServiceName(){return l.MMS_SERVICE_NAME}getMMSServiceVersion(){return l.MMS_SERVICE_VERSION}getMMSContainer(){return l.MMS_CONTAINER}getArch(){return l.ARCH}getMMSObjectType(){return l.MMS_OBJECT_TYPE}getMMSObjectId(){return l.MMS_OBJECT_ID}getMMSObjectFile(){return l.MMS_OBJECT_FILE}}},129:e=>{e.exports=require("child_process")},747:e=>{e.exports=require("fs")},626:e=>{e.exports=require("prompt")},435:e=>{e.exports=require("rxjs")}},o={};function n(t){var r=o[t];if(void 0!==r)return r.exports;var s=o[t]={exports:{}};return e[t](s,s.exports,n),s.exports}(()=>{const e=n(435),o=n(129).exec,t=n(747),r=n(155),s=n(305),l=n(626),i=process.env.npm_config_task||"test";let c,g,a,p;const h=new r.Env,u=new s.Utils;let m={setup:()=>new e.Observable((e=>{c=process.env.npm_config_type||h.getMMSObjectType(),g=process.env.npm_config_id||h.getMMSObjectId(),a=process.env.npm_config_object||h.getMMSObjectFile(),p=process.env.npm_config_pattern||h.getMMSPatterName(),e.complete()})),test:()=>new e.Observable((e=>{console.log("it works..."),e.complete()})),build:()=>new e.Observable((e=>{let n=`docker build -t ${h.getMMSContainer()} -f Dockerfile.${h.getArch()} .`.replace(/\r?\n|\r/g,"");console.log(n),o(n,{maxBuffer:2048e3},((o,n,t)=>{o?console.log("failed to build docker image",o):(console.log(n),console.log("done building docker image")),e.next(),e.complete()}))})),push:()=>new e.Observable((e=>{let n=`docker push ${h.getMMSContainer()}`;console.log(n),o(n,{maxBuffer:2048e3},((o,n,t)=>{o?(console.log("failed to publish mms service",o),e.error(o)):(console.log(n),console.log("done publishing mms service"),e.next(),e.complete())}))})),publishService:()=>new e.Observable((e=>{let n=`hzn exchange service publish -O ${h.getMMSContainerCreds()} -f config/service.json`;console.log(n),o(n,{maxBuffer:2048e3},((o,n,t)=>{o?(console.log("failed to publish mms service",o),e.error(o)):(console.log(n),console.log("done publishing mms service"),e.next(),e.complete())}))})),publishPattern:()=>new e.Observable((e=>{let n="hzn exchange pattern publish -f config/pattern.json";console.log(n),o(n,{maxBuffer:2048e3},((o,n,t)=>{o?(console.log("failed to publish mms pattern",o),e.error(o)):(console.log(n),console.log("done publishing mss pattern"),e.next(),e.complete())}))})),agentRun:()=>new e.Observable((e=>{let n=`hzn register --policy config/policy.json --pattern "${p}"`;console.log(n),o(n,{maxBuffer:2048e3},((o,n,t)=>{o?(console.log("failed to register mms agent",o),e.error(o)):(console.log(n),console.log("done registering mss agent"),e.next(),e.complete())}))})),publishObject:()=>new e.Observable((e=>{let n=`hzn mms object publish --type=${c} --id=${g} --object=${a} --pattern=${p}`;console.log(n),o(n,{maxBuffer:2048e3},((o,n,t)=>{o?(console.log("failed to publish object",o),e.error(o)):(console.log(n),console.log("done publishing object"),e.next(),e.complete())}))})),unregisterAgent:()=>new e.Observable((e=>{let n="hzn unregister -f";console.log(n),o(n,{maxBuffer:2048e3},((o,n,t)=>{o?(console.log("failed to unregister mms agent",o),e.error(o)):(console.log(n),console.log("done unregistering mss agent"),e.next(),e.complete())}))})),registerAgent:()=>new e.Observable((e=>{m.unregisterAgent().subscribe({complete:()=>{m.build().subscribe({complete:()=>{m.push().subscribe({complete:()=>{m.publishService().subscribe({complete:()=>{m.publishPattern().subscribe({complete:()=>{m.agentRun().subscribe({complete:()=>{e.next(),e.complete()},error:o=>{e.error(o)}})},error:o=>{e.error(o)}})},error:o=>{e.error(o)}})},error:o=>{e.error(o)}})},error:o=>{e.error(o)}})},error:o=>{e.error(o)}})})),showHorizonInfo:()=>new e.Observable((e=>{const o=m.getHorizonInfo();console.log(o),e.next(o),e.complete()})),getHorizonInfo:()=>(0,t.readFileSync)("/etc/default/horizon").toString().split("\n"),updateHorizonInfo:()=>new e.Observable((e=>{let o=m.getHorizonInfo(),n=[];o.forEach(((e,o)=>{if(e.length>0){let t=e.split("=");t&&t.length>0&&(n[o]={name:t[0],default:t[1],required:!0})}})),console.log("\nKey in new value or press Enter to keep current value: "),l.get(n,((o,n)=>{console.log(n),console.log("\nWould like to update horizon: Y/n?"),l.get({name:"answer",required:!0},((o,r)=>{if("Y"===r.answer){let o="";for(const[e,t]of Object.entries(n))o+=`${e}=${t}\n`;m.copyFile("sudo cp /etc/default/horizon /etc/default/.horizon").then((()=>{(0,t.writeFileSync)(".horizon",o),m.copyFile("sudo mv .horizon /etc/default/horizon").then((()=>{e.next(),e.complete()}))}))}}))}))})),copyFile:e=>new Promise(((n,t)=>{try{console.log(e),o(e,{maxBuffer:2048e3},((e,o,t)=>{e?console.log("failed to move file",e):console.log("done moving file"),n(o)}))}catch(e){console.log(e),n(e)}})),listService:()=>u.listService(),listPattern:()=>u.listPattern(),listNode:()=>u.listNode(),listObject:()=>u.listObject(),listDeploymentPolicy:()=>u.listDeploymentPolicy(),checkConfigState:()=>u.checkConfigState(),listNodePattern:()=>u.listNodePattern(),getDeviceArch:()=>u.getDeviceArch(),createHznKey:()=>u.createHznKey()};h.init().subscribe({next:()=>{m.setup().subscribe({complete:()=>{console.log(i),m[i]().subscribe((()=>{console.log("process completed."),process.exit(0)}))},error:e=>{console.log("something went wrong. ",e)}})},error:e=>{console.log("something went wrong. ",e)}})})()})();