#!/usr/bin/env node
(()=>{"use strict";var e={184:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Env=void 0;const t=n(435),o=n(747),s=n(129).exec,i=process.env;r.Env=class{constructor(){this.env=i.npm_config_env||"biz"}init(){return new t.Observable((e=>{this.hznEnv=i.npm_config_hznEnv||"./config/mms/.env-hzn.json",this.hznJson=JSON.parse((0,o.readFileSync)(this.hznEnv).toString()),console.log(process.cwd(),this.env,this.hznJson),this.envVars=this.hznJson[this.env].envVars;for(const[e,r]of Object.entries(this.envVars))i[e]=r.replace(/\r?\n|\r/g,""),console.log(`${e}: ${i[e]}`);this.envVars.ARCH&&void 0!==this.envVars.ARCH?(this.setAdditionalEnv(),console.log(this.envVars.ARCH),e.next(),e.complete()):s("hzn architecture",{maxBuffer:2048e3},((r,n,t)=>{r?(console.log("failed to identify arch",r),e.error(r)):(i.ARCH=this.envVars.ARCH=n.replace(/\r?\n|\r/g,""),this.setAdditionalEnv(),e.next(),e.complete())}))}))}setAdditionalEnv(){i.PATTERN_NAME=`pattern-${i.SERVICE_NAME}`,i.SERVICE_CONTAINER=`${i.YOUR_DOCKERHUB_ID}/${i.SERVICE_NAME}:${i.SERVICE_VERSION}`.replace(/\r?\n|\r/g,"")}getEnv(){return this.env}getOrgId(){return console.log(i.HZN_ORG_ID),i.HZN_ORG_ID}getExchangeUserAuth(){return i.HZN_EXCHANGE_USER_AUTH}getExchangeUrl(){return i.HZN_EXCHANGE_URL}getFSSCSSUrl(){return i.HZN_FSS_CSSURL}getMyServiceName(){return i.SERVICE_NAME}getMyServiceVersion(){return i.SERVICE_VERSION}getMMSSharedVolume(){return i.MMS_SHARED_VOLUME}getVolumeMount(){return i.VOLUME_MOUNT}getMyDockerHubId(){return i.YOUR_DOCKERHUB_ID}getDockerImageBase(){return`${i.YOUR_DOCKERHUB_ID}/${i.SERVICE_NAME}`}getContainerCreds(){return i.CONTAINER_CREDS}getPatterName(){return i.PATTERN_NAME}getServiceContainer(){return i.SERVICE_CONTAINER}getArch(){return i.ARCH}}},129:e=>{e.exports=require("child_process")},747:e=>{e.exports=require("fs")},626:e=>{e.exports=require("prompt")},435:e=>{e.exports=require("rxjs")}},r={};function n(t){var o=r[t];if(void 0!==o)return o.exports;var s=r[t]={exports:{}};return e[t](s,s.exports,n),s.exports}(()=>{const e=n(435),r=n(129).exec,t=n(184),o=(n(626),process.env.npm_config_task||"test"),s=new t.Env;let i={setup:()=>new e.Observable((e=>{e.complete()})),test:()=>new e.Observable((e=>{console.log("it works..."),e.complete()})),publishService:()=>new e.Observable((e=>{let n=`hzn exchange service publish -O ${s.getContainerCreds()} -f config/service.json --pull-image`;console.log(n),r(n,{maxBuffer:2048e3},((r,n,t)=>{r?(console.log("failed to publish service",r),e.error(r)):(console.log(n),console.log(`done publishing ${s.getMyServiceName()} service`),e.next(),e.complete())}))})),publishPattern:()=>new e.Observable((e=>{let n="hzn exchange pattern publish -f config/pattern.json";console.log(n),r(n,{maxBuffer:2048e3},((r,n,t)=>{r?(console.log("failed to publish mms pattern",r),e.error(r)):(console.log(n),console.log(`done publishing ${s.getPatterName()} pattern`),e.next(),e.complete())}))}))};s.init().subscribe({next:()=>{i.setup().subscribe({complete:()=>{i[o]().subscribe((()=>{console.log("process completed."),process.exit(0)}))},error:e=>{console.log("something went wrong. ",e)}})},error:e=>{console.log("something went wrong. ",e)}})})()})();